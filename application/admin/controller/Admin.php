<?php
namespace app\admin\controller;
use app\common\model\AdminMenu;
use app\common\model\AdminRole;
use app\common\model\AdminUser;
use library\XunSearch;
use think\Validate;
use library\Tree;
use think\Loader;
use library\Auth;

class Admin extends Base {
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    private function menu(){
        $adminMenuModel = new AdminMenu();
        $ruleList = $adminMenuModel->getTreeMenu();
        Tree::instance()->init($ruleList);

        $menu = Tree::instance()->getTreeList(Tree::instance()->getTreeArray(0), 'title');
        $ruledata = [0 => "无"];
        foreach ($menu as $k => &$v)
        {
            if (!$v['type'])
                continue;
            $ruledata[$v['id']] = $v['title'];
        }

        return $ruledata;
    }

    //管理员列表
    public function adminList(){
        $result = array(
            'code'=> 0,
            'msg'=> "",
            'count'=> 0,
            'data'=> array(),
        );
        if($this->request->isPost()){
            $this->request->filter(['strip_tags', 'htmlspecialchars']);

            $name      = $this->request->post('name');
            $account      = $this->request->post('account');
            $page      = (int)$this->request->post('page', 0);
            $limit      = (int)$this->request->post('limit', 0);
            $offset = empty($page)?0:($page-1)*$limit;
            $condition = [];
            if ( ! empty($name) ) {
                $condition['user.name'] = $name;
            }

            if ( ! empty($account) ) {
                $condition['user.account'] = $account;
            }

            $adminUserModel = new AdminUser();
            $count = $adminUserModel->fetchCount($condition);
            $list  = array();
            if ( 0 < $count ) {
                $list = $adminUserModel->fetchList($condition,$offset,$limit);
            }
            $result['count'] = $count;
            $result['data'] = $list;
            echo  json_encode($result);die;
        }
        return $this->view->fetch();

    }

    public function createAdmin(){
        if ( ! $this->request->isPost() ) {
            return $this->view->fetch();
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);

        // 接收参数
        $account = $this->request->post('account');
        $name = $this->request->post('name');
        $password = $this->request->post('password');
        $repasswd = $this->request->post('repassword');
        $level  = $this->request->post('level');
        $isable   = $this->request->post('isable');

        $rule = [
            ['account', 'require|chsAlphaNum|length:2,16', '账号不能为空|账号只能由汉字、字母和数字组成|账号长度为2-16位字符'],
            ['password', 'require|length:6,16', '密码不能为空|密码长度为6-16位字符'],
            ['repassword', 'require|confirm:password', '确认密码不能为空|两次密码输入不一致'],
        ];
        $data = [
            'name' => $name,
            'account' => $account,
            'password' => $password,
            'repassword' => $repasswd,
            'level'=>$level,
            'isable'=>$isable,
        ];
        // 校验参数
        $validate = new Validate($rule);
        if ( ! $validate->check($data) ) {
            $this->error($validate->getError());
        }

        $adminUserModel = new AdminUser();

        if ( $adminUserModel->hasUserName($name) ) {
            $this->error(lang('管理员账号已存在'));
        }

        $data['password'] =password_hash($password, PASSWORD_DEFAULT);
        unset($data['repassword']);

        $adminId = $adminUserModel->insertGetId($data);

        if ($adminId < 0) {
            $this->error("添加失败");
        }

        $this->success("添加成功");

    }


    public function editAdmin(){
        if ( $this->request->isPost() ) {
            // 接收参数
            $id = $this->request->post('id');
            $name = $this->request->post('name');
            $password = $this->request->post('password');
            $repasswd = $this->request->post('repassword');
            $role = $this->request->post('role');
            $level  = $this->request->post('level');
            $isable   = $this->request->post('isable');

            $adminUserModel = new AdminUser();

            $data['name']  = $name;
            $data['role']  = $role;
            $data['level']  = $level;
            $data['isable']  = $isable;

            if(!empty($password)){
                $data['password'] =password_hash($password, PASSWORD_DEFAULT);
            }


            $res = $adminUserModel->update($data,array('id'=>$id));

            if (false === $res) {
                $this->error("修改失败");
            }

            $this->success("修改成功");
        }

        $id = $this->request->get('id');
        $adminUserModel = new AdminUser();
        $info = $adminUserModel->getUserInfoById($id);
        $adminRoleModel = new AdminRole();
        $roles = $adminRoleModel->getRoleList(array('status'=>1));
        $this->assign('info', $info);
        $this->assign('roles', $roles);
        return $this->view->fetch('editadmin');
    }

    public function updateAdminUserStatus(){
        if ( ! $this->request->isPost() ) {
            $this->error("无效的请求");
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);
        // 接收参数
        $id = $this->request->post('id');
        $isable = $this->request->post('isable');
        $isable = $isable=='false'? 0 : 1;

        $adminUserModel = new AdminUser();
        $res = $adminUserModel->update(array('isable' => $isable),array('id'=>$id));

        if (false === $res) {
            $this->error("修改失败");
        }

        $this->success("修改成功");
    }

    //菜单列表
    public function menuList(){
        $result = array(
            'code'=> 0,
            'msg'=> "",
            'count'=> 0,
            'data'=> array(),
        );
        if($this->request->isPost()){
            $this->request->filter(['strip_tags', 'htmlspecialchars']);
           // $xunSearch = new XunSearch();
            $title      = $this->request->post('title');
            //$ids = $xunSearch ->searchMenu($title);
            $page      = (int)$this->request->post('page', 0);
            $limit      = (int)$this->request->post('limit', 0);
            $offset = empty($page)?0:($page-1)*$limit;
            $condition = [];
//            if ( ! empty($ids) ) {
//                $condition['id'] = array('in',$ids);
//            }
            if(!empty($title)){
                $condition['title'] = array('like',"%".$title."%");
            }
            $adminMenuModel = new AdminMenu();
            $count = $adminMenuModel->fetchCount($condition);
            $list = array();
            if ( 0 < $count ) {
                $list = $adminMenuModel->fetchList($condition,$offset,$limit);
            }

            $result['count'] = $count;
            $result['data'] = $list;
            echo  json_encode($result);die;
        }
        return $this->view->fetch();
    }


    //添加菜单
    public function createMenu(){
        if ( ! $this->request->isPost() ) {
            $id = $this->request->get('id');
            $adminMenuModel = new AdminMenu();
            $this->assign('select_menu', $this->menu());
            if($id>0){
                $info = $adminMenuModel->getMenuInfoById($id);
                $this->assign('info', $info);
                return $this->view->fetch('editmenu');
            }else{
                return $this->view->fetch('addmenu');
            }

        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);

        // 接收参数
        $id = $this->request->post('id');
        $pid = $this->request->post('pid');
        $title = $this->request->post('title');
        $type = $this->request->post('type');
        $icon = $this->request->post('icon');
        $module  = $this->request->post('module');
        $action   = $this->request->post('action');
        $isshow   = $this->request->post('isshow');
        $weight   = $this->request->post('weight');

        $rule = [
            ['title', 'require', '标题不能为空'],
        ];
        $data = [
            'pid' => $pid,
            'title' => $title,
            'type' => $type,
            'icon' => $icon,
            'module'=>$module,
            'action'=>$action,
            'isshow'=>$isshow,
            'weight'=>$weight,
        ];
        // 校验参数
        $validate = new Validate($rule);
        if ( ! $validate->check($data) ) {
            $this->error($validate->getError());
        }

        $adminMenuModel = new AdminMenu();

        if($id>0){
            $res = $adminMenuModel->update($data,array('id'=>$id));

            if (false === $res) {
                $this->error("修改失败");
            }
               $this->success("修改成功");
        }else{
            $id = $adminMenuModel->insertGetId($data);

            if ($id < 0) {
                $this->error("添加失败");
            }

            $this->success("添加成功");
        }

    }

    public function updateAdminMenuStatus(){
        if ( ! $this->request->isPost() ) {
            $this->error("无效的请求");
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);
        // 接收参数
        $id = $this->request->post('id');
        $isshow = $this->request->post('isshow');
        $isshow = $isshow=='false'? 0 : 1;

        $adminMenuModel = new AdminMenu();
        $res = $adminMenuModel->update(array('isshow' => $isshow),array('id'=>$id));

        if (false === $res) {
            $this->error("修改失败");
        }

        $this->success("修改成功");
    }

    //角色列表
    public function roleList(){
        $result = array(
            'code'=> 0,
            'msg'=> "",
            'count'=> 0,
            'data'=> array(),
        );
        if($this->request->post()){
            $this->request->filter(['strip_tags', 'htmlspecialchars']);

            $name      = $this->request->post('name');

            $page      = (int)$this->request->post('page', 0);
            $limit      = (int)$this->request->post('limit', 0);
            $offset = empty($page)?0:($page-1)*$limit;

            $condition = [];
            if ( ! empty($name) ) {
                $condition['name'] = $name;
            }
            $adminRoleModel = new AdminRole();
            $count = $adminRoleModel->fetchCount($condition);
            $list  = array();
            if ( 0 < $count ) {
                $list = $adminRoleModel->fetchList($condition,$offset,$limit);
            }

            $result['count'] = $count;
            $result['data'] = $list;
            echo  json_encode($result);die;
        }
        return $this->view->fetch();
    }

    public function createRole(){
        $id = $this->request->get('id');
        $adminRoleModel = new AdminRole();
        if($id>0){
            $info = $adminRoleModel->getRoleInfoById($id);
            $rule = unserialize($info['rule']);
            $adminMenuModel = new AdminMenu();
            $tree = $adminMenuModel -> getTreeMenu();
            $treeList = array();
            foreach ($tree as $key => $item){
                if($item['pid'] != 0 && in_array($item['id'],$rule)){
                    $treeList[$key]['checked'] = true;
                }
                $treeList[$key]['title'] = $item['title'];
                $treeList[$key]['id'] = $item['id'];
                $treeList[$key]['field'] = 'action';
                $treeList[$key]['pid'] = $item['pid'];
                $treeList[$key]['spread'] = true;
            }

            $privList = $adminMenuModel -> getTree($treeList,0);

            $this->assign('priv',json_encode($privList));
            $this->assign('info', $info);
            return $this->view->fetch('editrole');
        }else{
            $adminMenuModel = new AdminMenu();
            $tree = $adminMenuModel -> getTreeMenu();
            $treeList = array();
            foreach ($tree as $key => $item){
                $treeList[$key]['title'] = $item['title'];
                $treeList[$key]['id'] = $item['id'];
                $treeList[$key]['field'] = 'action';
                $treeList[$key]['pid'] = $item['pid'];
                $treeList[$key]['spread'] = true;
            }
            $privList = $adminMenuModel -> getTree($treeList,0);

            $this->assign('priv',json_encode($privList));
            return $this->view->fetch('addrole');
        }
    }


    public function addRole(){
        if ( ! $this->request->isPost() ) {
            $this->error("无效的请求");
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);
        // 接收参数
        $name = $this->request->post('name');
        $desc = $this->request->post('desc');
        $status = $this->request->post('status');
        $rule = $this->request->post('rule/a');

        $adminRoleModel = new AdminRole();

        $data = [
            'name' => $name,
            'desc' => $desc,
            'status' => $status,
            'rule' => serialize($rule),
        ];
        $id = $adminRoleModel->insertGetId($data);

        if ($id < 0) {
            $this->error("添加失败");
        }

        $this->success("添加成功");
    }

    public function editRole(){
        if ( ! $this->request->isPost() ) {
            $this->error("无效的请求");
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);
        // 接收参数
        $id = $this->request->post('id');
        $name = $this->request->post('name');
        $desc = $this->request->post('desc');
        $status = $this->request->post('status');
        $rule = $this->request->post('rule/a');
        $adminRoleModel = new AdminRole();

        $data = [
            'name' => $name,
            'desc' => $desc,
            'status' => $status,
            'rule' => serialize($rule),
        ];

        $res = $adminRoleModel->update($data,array('id'=>$id));

        if (false === $res) {
            $this->error("修改失败");
        }
        $this->success("修改成功");
    }

    public function updateAdminRoleStatus(){
        if ( ! $this->request->isPost() ) {
            $this->error("无效的请求");
        }

        $this->request->filter(['strip_tags', 'htmlspecialchars']);
        // 接收参数
        $id = $this->request->post('id');
        $status = $this->request->post('status');
        $status = $status=='false'? 0 : 1;

        $adminRoleModel = new AdminRole();
        $res = $adminRoleModel->update(array('status' => $status),array('id'=>$id));

        if (false === $res) {
            $this->error("修改失败");
        }

        $this->success("修改成功");
    }


    /**
     * 个人信息
     * @return string
     * Author: wuyh
     * Date: 2020/3/10 16:17
     */
    public function profile()
    {
        $params = request()->param();
        $adminUser = new AdminUser();
        $admin = session('admin');

        if (empty($admin) && empty($params['id'])) $this->error('信息不存在', 'index');

        $info = $adminUser->where(['id' => $admin['id']])->field('password', true)->find();

        if ($this->request->isGet()) return $this->view->fetch('',['info' => $info]);
        if ($this->request->isPost()){
            $params = request()->param();
            if (!isset($params['id'])|| empty($params['id'])) return $this->error('修改失败');
            $res = $adminUser->validate('AdminUser.update')->save([
                'mobile' => $params['mobile'],
                'name' => $params['name'],
                'email' => $params['email'],
                'sex' => $params['sex'],
            ], ['id' => intval($params['id'])]);

            if ($res === false) return $this->error('修改失败:'. $adminUser->getError());
            return json(['code' => 1, 'msg' => '修改成功']);
        }
    }

    /**
     * 修改密码
     * @return string|\think\response\Json
     * @Author: wuyh
     * @Date: 2020/3/10 16:21
     */
    public function password()
    {
        $admin = session('admin');
        if ($this->request->isGet()) return $this->view->fetch('', [ 'info' => ['id' => $admin['id']]]);
        if ($this->request->isPost()) {

            $params = input('post.');
            $validate = Loader::validate('AdminUser');
            $res = $validate->scene('reset_passwd')->check($params);

            if (!$res) return json(['code' => 0, 'msg' => $validate->getError()]);

            $adminUser = AdminUser::get($params['id']);

            if (empty($adminUser)) return json(['code' => 0, 'msg' => '未找到信息']);
            if (!password_verify(trim($params['old_password']), $adminUser->password)) return json(['code' => 0, 'msg' => '原密码错误']);

            $adminUser->password = password_hash(trim($params['password']), PASSWORD_DEFAULT);

            $res = $adminUser->save();

            if (!$res) return json(['code' => 0, 'msg' => '修改失败']);
            Auth::logout();
            return json(['code' => 1, 'msg' => '修改成功']);
        };
    }

}