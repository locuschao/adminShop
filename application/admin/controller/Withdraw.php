<?php
// +----------------------------------------------------------------------
// | 提现管理
// +----------------------------------------------------------------------
// | Copyright (c) 2019-2020 rights reserved.
// +----------------------------------------------------------------------
// | Author: wuyh
// +----------------------------------------------------------------------
// | Date: 2020/3/26 14:31
// +----------------------------------------------------------------------
namespace app\admin\controller;
use app\common\model\WalletLog;
use app\common\model\Withdraw AS WithdrawModel;
use app\common\service\UserWalletService;
use app\common\model\UserCoupon;
use think\Db;
use think\Exception;

class Withdraw extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->model = new WithdrawModel();
    }

    /**
     * 列表
     * @return string
     * @Author: wuyh
     * @Date: 2020/3/26 15:34
     */
    public function index()
    {
        if ($this->request->isAjax()) return $this->model->tableData(input('param.'));
        return $this->view->fetch();
    }


    /**
     * 详情
     * @Author: wuyh
     * @Date: 2020/3/26 15:34
     */
    public function view($id)
    {
        if (empty($id)) $this->error('参数错误');
        $info = $this->model->with(['User','Admin'])->find(['id' => $id]);

        if (empty($info)) $this->error('没有找到订单信息');
        return $this->view->fetch('', ['info' => $info]);
    }

    /**
     * 审核
     * @return \think\response\Json
     * @Author: wuyh
     * @Date: 2020/3/26 18:53
     */
    public function audit()
    {
        $checkField = 'id,status';
        $res = $this->checkParams($checkField);
        if ($res['code'] == 0) return $res;

        $params = request()->param();
        if ($params['status'] == 4 && empty($params['memo'])) return json_return(0, '请填写驳回原因');

        $withdrawModel = new WithdrawModel();
        $withdraw = $withdrawModel->lock(true)->find($params['id']);
        if (empty($withdraw)) return json_return(0, '没有找到提现申请记录');

        if ($withdraw['status'] != WithdrawModel::WITHDRAW_STATUS_WAIT_AUDIT) return json_return(0, '提现已经被审核');

        $data = [
            'audit_time' => time(),
            'operator_id' => $this->admin['id'],
            'audit_memo' => $params['memo'],
            'status' => $params['status'],
        ];

        $validate = new \app\common\validate\Withdraw();
        $msg = $validate->scene('audit')->check($data);
        if(true !== $msg) return json_return(0, $validate->getError());

        try{
            Db::startTrans();
            $res = $withdrawModel->allowField(true)->save($data, ['id' => $params['id']]);
            if ($res === false) throw new Exception('ERROR 1001');

            $usserWalletService = new UserWalletService();
            $userWallet = $usserWalletService->getUserWalletInfo($withdraw['user_id'], true);

            if ($data['status'] == WithdrawModel::WITHDRAW_STATUS_WAIT){
                if ($withdraw['withdraw_type'] == WithdrawModel::WITHDRAW_TYPE_REDPACK){
                    //直接提取到余额
                    $options = [
                        'user_id' => $withdraw['user_id'],
                        'business_type' => 10004,
                        'income_expenses' => $withdraw['arrival_money'],
                        'link_code' => $withdraw['withdraw_no'],
                        'money_type' => WalletLog::MONEY_TYPE_NORMAL,
                        'msg' => "红包提取审核-通过",
                    ];

                    $ret = $usserWalletService->cashInc($userWallet, $options, true);
                    if ($ret['code'] == 0) throw new Exception('ERROR - ' . $ret['msg']);
                }
            }elseif($data['status'] == WithdrawModel::WITHDRAW_STATUS_REJECT){

                if ($withdraw['withdraw_type'] == WithdrawModel::WITHDRAW_TYPE_CASH){
                    //驳回 - 余额退回钱包
                    $options = [
                        'user_id' => $withdraw['user_id'],
                        'business_type' => 20003,
                        'income_expenses' => $withdraw['arrival_money'],
                        'link_code' => $withdraw['withdraw_no'],
                        'money_type' => WalletLog::MONEY_TYPE_NORMAL,
                        'msg' => "余额提取审核-驳回",
                    ];
                    $ret = $usserWalletService->cashInc($userWallet, $options, true);
                    if ($ret['code'] == 0) throw new Exception('ERROR - ' . $ret['msg']);
                }elseif($withdraw['withdraw_type'] == WithdrawModel::WITHDRAW_TYPE_REDPACK){
                    //驳回 - 恢复红包

                    if (empty($withdraw['source_id'])) throw new Exception('ERROR - ' . '没有找到红包ID');
                    $data = [
                        'status' => UserCoupon::STATUS_WAIT,
                        'is_use_type' => 0
                    ];

                    $ret = UserCoupon::where(['coupon_id' => $withdraw['source_id']])->save($data);
                    if ($ret === false) throw new Exception('ERROR - ' . '退回红包失败');

                    //发送消息
                }
            }
            Db::commit();
            return json_return(1, '审核成功');
        }catch (Exception $e){
            Db::rollback();
            return json_return(0, $e->getMessage());
        }
    }
}